model <- lmer(event_average_detection_delay ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ sampling_rate)
# post-hoc tests
emmeans_results <- emmeans(model, ~ window_length)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
model <- lmer(event_average_detection_delay ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_window_sizes_0_percent_overlap", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
# convert to factors and relevel
df$sampling_rate <- as.factor(df$sampling_rate) # convert to factor
df$sampling_rate <- factor(df$sampling_rate, levels = c("256", "128", "64"))  # set 256 Hz as reference
df$window_length <- as.factor(df$window_length) # convert to factor
df$window_length <- relevel(df$window_length, ref = "1")  # set 1 second as reference
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
emmeans_results <- emmeans(model, ~ window_length)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# linear mixed effects model (LMM)
model <- lmer(event_false_detections_per_hour ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ window_length)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
# cohen's d
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# load packages --------------------------------------------------------------------
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_bit_width", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
df$bit_width <- as.factor(df$bit_width) # convert to factor
df$bit_width <- factor(df$bit_width, levels = c("16", "14", "12", "10", "8"))  # set 16 bits as reference
# linear mixed effects model (LMM)
model <- lmer(event_false_detections_per_hour ~ 1 + bit_width + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ window_length)
# post-hoc tests
emmeans_results <- emmeans(model, ~ bit_width)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + bit_width + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
emmeans_results <- emmeans(model, ~ bit_width)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + bit_width + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ bit_width)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + bit_width + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# load packages --------------------------------------------------------------------
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_n_channels", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
df$n_channels <- as.factor(df$n_channels) # convert to factor
df$n_channels <- factor(df$n_channels, levels = c("4", "3", "2", "1"))  # set 4 channels as reference
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + bit_width + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + n_channels + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ bit_width)
# post-hoc tests
emmeans_results <- emmeans(model, ~ n_channels)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# linear mixed effects model (LMM)
model <- lmer(event_false_detections_per_hour ~ 1 + n_channels + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_false_detections_per_hour ~ 1 + n_channels + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
emmeans_results <- emmeans(model, ~ n_channels)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + n_channels + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ n_channels)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
# cohen's d
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# load packages --------------------------------------------------------------------
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_window_sizes_50_percent_overlap", ".csv"))
df$window_length <- as.factor(df$window_length) # convert to factor
df$window_length <- relevel(df$window_length, ref = "1")  # set 1 second as reference
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ window_length)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
# load packages --------------------------------------------------------------------
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_window_sizes_50_percent_overlap", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
df$window_length <- as.factor(df$window_length) # convert to factor
df$window_length <- relevel(df$window_length, ref = "1")  # set 1 second as reference
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ window_length)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ window_length)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
# cohen's d
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# linear mixed effects model (LMM)
model <- lmer(event_false_detections_per_hour ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
emmeans_results <- emmeans(model, ~ window_length)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ window_length)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
# cohen's d
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_sampling_rates", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
# convert to factors and relevel
df$sampling_rate <- as.factor(df$sampling_rate) # convert to factor
# load packages
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_sampling_rates", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_sampling_rates", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
# convert to factors and relevel
df$sampling_rate <- as.factor(df$sampling_rate) # convert to factor
# load packages
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_sampling_rates", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
# convert to factors and relevel
df$sampling_rate <- as.factor(df$sampling_rate) # convert to factor
df$sampling_rate <- factor(df$sampling_rate, levels = c("256", "128", "64"))  # set 256 Hz as reference
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + sampling_rate + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ sampling_rate)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
model <- lmer(event_false_detections_per_hour ~ 1 + sampling_rate + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + sampling_rate + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_window_sizes_0_percent_overlap", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
df$window_length <- as.factor(df$window_length) # convert to factor
df$window_length <- relevel(df$window_length, ref = "1")  # set 1 second as reference
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_false_detections_per_hour ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ window_length)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
# load packages
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_window_sizes_50_percent_overlap", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
df$window_length <- as.factor(df$window_length) # convert to factor
df$window_length <- relevel(df$window_length, ref = "1")  # set 1 second as reference
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_false_detections_per_hour ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
model <- lmer(event_average_detection_delay ~ 1 + window_length + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# load packages
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_sampling_rates", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
# convert to factors and relevel
df$sampling_rate <- as.factor(df$sampling_rate) # convert to factor
df$sampling_rate <- factor(df$sampling_rate, levels = c("256", "128", "64"))  # set 256 Hz as reference
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + sampling_rate + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + sampling_rate + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
model <- lmer(event_sensitivity ~ 1 + sampling_rate + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_false_detections_per_hour ~ 1 + sampling_rate + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ sampling_rate)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + sampling_rate + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
emmeans_results <- emmeans(model, ~ sampling_rate)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_n_channels", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
df$n_channels <- as.factor(df$n_channels) # convert to factor
df$n_channels <- factor(df$n_channels, levels = c("4", "3", "2", "1"))  # set 4 channels as reference
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + n_channels + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_false_detections_per_hour ~ 1 + n_channels + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + n_channels + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_false_detections_per_hour ~ 1 + n_channels + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
model <- lmer(event_sensitivity ~ 1 + n_channels + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# post-hoc tests
emmeans_results <- emmeans(model, ~ n_channels)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
print(pairwise_results)
# cohen's d
eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
# Statistics for "The impact of EEG preprocessing parameters on ultra-low-power seizure detection"
# load packages
if (!requireNamespace("pacman", quietly = TRUE)) {
install.packages("pacman") }
library("pacman")
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
print(getwd())
# define filenames
data_path <- "/data/"
filenames <- c(
"df_folds_avg_sampling_rates",
"df_folds_avg_window_sizes_0_percent_overlap",
"df_folds_avg_window_sizes_50_percent_overlap",
"df_folds_avg_bit_width",
"df_folds_avg_n_channels")
# define conditions and metrics
conditions <- c("sampling_rate", "window_length", "bit_width", "n_channels")
metrics <- c("event_sensitivity", "event_false_detections_per_hour", "event_average_detection_delay")
# define reference levels for each condition
ref_levels <- list(
sampling_rate = c("256", "128", "64"), # reference: 256Hz
window_length = c("1", "2", "4", "8"), # reference: 1 s
bit_width = c("16", "14", "12", "10", "8"), # reference: 16 bits
n_channels = c("4", "3", "2", "1") # reference: 4 channels
)
# function to load data & do LMM, posthoc-contrasts and effect size calculation
do_stats <- function(filename, condition, metrics, ref_levels) {
# load data
df_folds_avg <- read.csv(paste0(getwd(), data_path, filename, ".csv"))
df_folds_avg$patient <- as.factor(df_folds_avg$patient)
# skip if condition not in data
if (!(condition %in% colnames(df_folds_avg))) {
return()
}
# convert condition to factor and set reference levels
df_folds_avg[[condition]] <- as.factor(df_folds_avg[[condition]])
if (!is.null(ref_levels[[condition]])) {
df_folds_avg[[condition]] <- factor(df_folds_avg[[condition]], levels = ref_levels[[condition]])
}
# calculations for each metric
for (metric in metrics) {
if (!(metric %in% colnames(df_folds_avg))) {
message(paste("Metric", metric, "not found in", filename))
next
}
# fit LMM
model_formula <- as.formula(paste(metric, "~ 1 +", condition, "+ (1 | patient)"))
model <- lmer(model_formula, data = df_folds_avg)
model_summary <- summary(model)
# post-hoc contrasts
emmeans_results <- emmeans(model, specs = condition)
pairwise_results <- pairs(emmeans_results, adjust = "fdr") # Benjamini & Hochberg procedure
# effect sizes (Cohen's d)
cohens_d <- eff_size(emmeans_results, sigma = sigma(model), edf = Inf)
# print results
cat("\n----------------------- Results for", filename, metric, "-----------------------\n")
cat("\nLMM:\n")
print(model_summary$coefficients)
cat("\nPost-hoc-contrasts:\n")
print(pairwise_results)
cat("\nEffect sizes (Cohen's d):\n")
print(cohens_d)
}
}
# do statistics
for (filename in filenames) {
for (condition in conditions) {
do_stats(filename, condition, metrics, ref_levels)
}
}
# load packages
# install.packages("pacman")
library("pacman")
p_load_gh("paul-buerkner/brms", "reispat/lazerhawk", "anthonynorth/rscodeio", update=FALSE) # "reispat/lazerhawk" for 89% CIs
p_load("lmerTest", "emmeans", "effsize", update=FALSE)
library("lmerTest")
library("emmeans")
library("effsize")
# load data
data_path = "C:\\Users\\PatrickReisinger\\Precisis GmbH\\Innovation - Dokumente\\70-DataScience\\documents\\paper_seizure_detection\\data\\"
df <- read.csv(paste0(data_path, "df_folds_avg_bit_width", ".csv")) # df_folds_avg_sampling_rates, df_folds_avg_bit_width, df_folds_avg_window_sizes_0_percent_overlap, df_folds_avg_n_channels
df$bit_width <- as.factor(df$bit_width) # convert to factor
df$bit_width <- factor(df$bit_width, levels = c("16", "14", "12", "10", "8"))  # set 16 bits as reference
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + n_channels + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
df$bit_width <- as.factor(df$bit_width) # convert to factor
df$bit_width <- factor(df$bit_width, levels = c("16", "14", "12", "10", "8"))  # set 16 bits as reference
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + bit_width + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_false_detections_per_hour ~ 1 + bit_width + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_average_detection_delay ~ 1 + bit_width + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
# linear mixed effects model (LMM)
model <- lmer(event_sensitivity ~ 1 + bit_width + (1 | patient), data = df) # event_sensitivity, event_false_detections_per_hour, event_average_detection_delay
model_summary <- summary(model)
print(model_summary)
